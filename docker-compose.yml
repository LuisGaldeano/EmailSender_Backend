services:
  backend:
    container_name: ${PROJECT_NAME}_backend
    hostname: backend
    restart: unless-stopped
    image: ${PROJECT_NAME}_backend_image
    build:
      context: .
      dockerfile: docker/Dockerfile
    volumes:
      - ./src:/src/
      - vol_logs:/src/logs
      - vol_media:/src/media
    env_file:
      - .env
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    links:
      - postgres
    depends_on:
      - postgres
    logging:
      driver: "json-file"
      options:
        max-size: 50m
        max-file: "2"
    networks:
      - kafka-net

  postgres:
    image: postgres:13
    container_name: ${PROJECT_NAME}_postgres
    hostname: postgres
    restart: unless-stopped
    env_file:
      - .env
    logging:
      driver: "json-file"
      options:
        max-size: 50m
        max-file: "2"
    ports:
      - "${POSTGRES_EXTERNAL_PORT}:5432"
    volumes:
      - vol_postgres_db:/var/lib/postgresql/data
      - vol_logs:/logs
      - vol_media:/src/media
    networks:
      - kafka-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    hostname: zookeeper
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${ZOOKEEPER_CLIENT_PORT}:${ZOOKEEPER_CLIENT_PORT}"
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - kafka-net
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: emailsender_kafka
    hostname: emailsender_kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    env_file:
      - .env
    links:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9091:9091"
    networks:
      - kafka-net

networks:
  kafka-net:
    driver: bridge

volumes:
  vol_media:
    driver: local
  vol_logs:
    driver: local
  vol_postgres_db:
    driver: local
  vol_backend_pgadmin_data:
    driver: local